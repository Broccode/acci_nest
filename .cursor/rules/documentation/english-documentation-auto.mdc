---
description: ALWAYS use when writing or editing any content to ensure consistent English language usage throughout the entire project
globs: **/*.{md,ts,js,tsx,jsx,html,css,scss,json,yml,yaml,sql,graphql,prisma}
alwaysApply: true
---

# English Documentation Standard

## Context

- When working with ANY documentation, code, comments, or text files
- When creating or editing any files in the project
- When establishing project documentation that needs to be shared across teams
- When creating commits, messages, changelogs, or any other project-related content

## Critical Rules

- ALL text MUST be written in English (code, comments, documentation, changelogs, etc.)
- ALL variable names, function names, and other identifiers MUST be in English
- ALL commit messages MUST be in English
- ALL file content MUST be in English by default
- Headings, descriptions, requirements, and all content must be English
- Code examples and references in documentation must be in English
- Technical terms should follow industry-standard English terminology

## Exceptions (Limited)

- Language translation files specifically created for internationalization purposes
- User-facing content within i18n-specific examples when demonstrating multi-language support
- A few UI-specific elements that are explicitly required to be in non-English languages for end-user display
- API responses containing non-English content specifically designed for international users
- ONLY when explicitly directed by the user with specific instructions mentioning the exception

## Examples

<example>
# Project Architecture Document

## System Overview
The system consists of three main components:
1. Authentication service
2. Core API
3. Data processing pipeline

```typescript
// Example API endpoint implementation
@Post('users')
async createUser(@Body() createUserDto: CreateUserDto): Promise<User> {
  return this.userService.create(createUserDto);
}
```

// Example of valid i18n exception
const translations = {
  'en': { 'welcome': 'Welcome to our system' },
  'de': { 'welcome': 'Willkommen in unserem System' },
  'fr': { 'welcome': 'Bienvenue dans notre système' }
};
</example>

<example type="invalid">
# Projekt Architektur Dokument

## System Übersicht
Das System besteht aus drei Hauptkomponenten:
1. Authentifizierungsdienst
2. Kern-API
3. Datenverarbeitungspipeline

```typescript
// Beispiel einer API-Endpunkt-Implementierung
@Post('users')
async benutzerErstellen(@Body() erstelleBenutzerDto: CreateUserDto): Promise<User> {
  return this.benutzerService.erstellen(erstelleBenutzerDto);
}
```

// Invalid mix of languages in non-i18n context
const message = "Dies ist ein error message";
</example> 